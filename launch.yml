
- hosts: mycomputer

  tasks:

    - name: launch instances
      amazon.aws.ec2_instance:
        count: '{{ ec2_instance_count }}'
        image_id: '{{ ec2_ami_id }}'
        instance_type: '{{ ec2_type }}'
        key_name: '{{ key_name }}'
        region: '{{ aws_region }}'
        security_group: '{{ ec2_sg }}'
        vpc_subnet_id: '{{ ec2_vpc_subnet }}'
        wait: yes
        network:
          assign_public_ip: true
        tags:
          environment: dev
      register: ec2

    - name: debug
      debug:
        var: ec2

    - name: add instances in groupnames
      add_host:
        hostname: "{{ item.public_dns_name }}"
        groupname: launched
      loop: "{{ ec2.instances }}"

    - name: waitting ssh connection
      delegate_to: "{{ item.public_dns_name }}"
      remote_user: admin
      wait_for_connection:
        delay: 15
        timeout: 60
      with_items: "{{ ec2.instances }}"

- name: configure instance(s)
  hosts: launched
  become: True
  gather_facts: True
  remote_user: admin

  pre_tasks:
    - name: install a list of packages
      apt:
        name: '{{ packages }}'
        state: latest
        install_recommends: no
        update_cache: yes
        force_apt_get: yes
      vars:
        packages:
        - git
        - gnupg
        - gnupg2
        - python3-pip

  roles:
    - install_docker

  tasks:
    - name: git checkout
      git:
        repo: https://github.com/alvarofernandezavalos/springboot.git
        dest: /home/admin/springboot
        accept_hostkey: yes
        force: yes

    - name: install pip packages
      pip:
        name:
          - PyYAML==5.1.2
          - docker==6.1.3
          - docker-compose==1.29.2
        extra_args: --break-system-packages

    - name: docker compose up
      community.docker.docker_compose:
        project_src: springboot

- name: terminate instances
  hosts: mycomputer
  tasks:
    - name: terminate instances that were previously launched
      amazon.aws.ec2_instance:
        instance_ids: "{{ ec2.instance_ids }}"
        region: "{{ aws_region }}"
        state: 'absent'